#!/usr/bin/env perl

use strict;
use warnings;
use Data::Dumper;
use Bio::PrimerDesigner;
use CGI qw/:standard escape/;
use File::Temp qw/tempfile tempdir/;
use File::Basename qw/basename dirname/;
use Cwd 'abs_path';

use constant BINARY            => 'primer3';
use constant BINPATH           => '/usr/local/bin';
use constant METHOD            => 'local';
use constant IMAGEWIDTH        => 800;
use constant MAXRANGE          => 300;

#my $cgi = new CGI();
my ($ref, $dna, $start, $end);

if ( exists $ENV{GATEWAY_INTERFACE} ) {
    print CGI::header('text/html; charset=UTF-8');
    $ref = param('ref');
    $dna = param('seq');
    $start = param('start');
    $end = param('end');

} else {
# Use to test command-line output 
    $ref = "chrI";
    $dna = "CTTCATTTTTTTTTTGTTTTTCCCTTTTGTCTTTTGCACCGCTTATATATGGGTATGAAACAAGTT"
    . "CAAGAATTTATAATGGAACCCAAAGGTTCAGTCTTTGTAGTTCGAGCGACATTGCGCGTTTCCTTAGAAAAC"
    . "GCTGGAAAGATATTCTTTAACGAGACGGAGTAATTCTCGTCAGGAATAGGATGTTGATTGATTTTTGCTGTAG"
    . "TTATATAGCAGGGACCCACGGAAGAGAGCGAGCGCCTTCTTTCACAGGGACTTTTGTCAGCCACGTCTCCGGGG"
    . "AAAACAATTGCCGTCCGCGTCGCAGTGAGATTACGCAGCCGTGCGCTTCAGGGACAGAAAAGAAGCATTTCGCG"
    . "GCTACGGAGAAACCGTGCACTAACTCTCTCGAGGGTAGCCGCAAAGATTTCTTGTCTCTTCCATTAGGACATAGCTATCTTTTTCTTTTCTGTTTTTGGCGTATGATCTGTTCTGAGCCAAAGTTATAGATCATTGCTTGAATAAGCACCTCACAGAGTAGGGATTGTATAGAAAGTAGCTGAGCGTCTGCCCACGTAACAAACAATCTTGCCCCTTCCCCGCTCTTGTTTTCGCGTGCCTCTTCTACAATAATCTGGCCAGGCTGAATCGCGTTCTGCTGCTGCTGCTGCTATTGTTATTGTTGTTGTTGTTGTTTTGGCCAATTGCTTATGTGTTGGTCTGCAAATTAGCACCTCGTTCCCTGTTGGCAAACGCGCGCGTACAAGCCTTACAGGGCTTGAGAATGTTCTTCGTAGAAATGCATGCACAAAAATTCTGATCTAGCACACCATCGGTCTCTGTAGCTTCGGGCTCTATAGCTATGGGTTAGGAGTCCGTGAGTAGTAACAAGAAGAAGTATATAAAAAGCAGGTAAATCGTACTTCAATATGCTTCATTGTCACTGGATCGTCATATTCACTCTTGTTCTCATAATAGCAGTCCAAGTTTTCATCTTTGCAAGCTTTACTATTTCTTTCTTTTTATTGGTAAACTCTCGCCCATTACAAAAAAAAAAGAGATGTTCAATCGTTTTAACAAATTCCAAGCTGCTGTCGCTTTGGCCCTACTCTCTCGCGGCGCTCTCGGTGACTCTTACACCAATAGCACCTCCTCCGCAGACTTGAGTTCTATCACTTCCGTCTCGTCAGCTAGTGCAAGTGCCACCGCTTCCGACTCACTTTCTTCCAGTGACGGTACCGTTTATTTGCCATCCACAACAATTAGCGGTGATCTCACAGTTACTGGTAAAGTAATTGCAACCGAGGCCGTGGAAGTCGCTGCCGGTGGTAAGTTGACTTTACTTGACGGTGAAAAATACGTCTTCTCATCTGATCTAAAAGTTCACGGTGATTTGGTTGTCGAAAAGTCTGAAGCAAGCTACGAAGGTACCGCGTTCGACGTTTCTGGTGAGACTTTTGAAGTTTCCGGTAACTTCAGTGCTGAAGAAACTGGCGCTGTCTCCGCATCTATCTATTCATTCACACCTAGCTCGTTCAAGAGCAGCGGTGACATTTCTTTGAGTTTGTCAAAGGCCAAGAAGGGTGAAGTCACCTTTTCTCCATACTCTAACGCTGGTACCTTTTCTTTGTCAAATGCTATTCTCAACGGTGGTTCTGTTTCCGGTTTGTAACGTAGAGACGACGATGAAGGCTCTGTAAATAACGGTGAAATCAACCTAGACAATGGAAGTACCTATGTTATCGTTGAACCAGTTTCTGGAAACGGTACAATCAACATCGTCTCTGGTAACCTATACTTGCACTACCCTGACACCTTTACTGGCCAAACTGTTGTATTCAAGGGTGAAGGTGTTCTTGCCGTTGACCCAACCGAAACCAACGCCACTCCTATTCCTGTTGTTGGCTACACCGGTAAGAACCAAATTGCCATTACCGCCGACATCACTGCTCTTTCTTACGACGGTACTACTGGTGTCTTAACTGCAACCCAAGGTAACAGACAATTCTCTTTTGAAATTGGTACTGGATTCTCTAGTTCTGGCTTCAGTGTCTCCGAAGGAATCTTCGCAGGCGCCTACTCATATTACCTAAACTATGACGGTGTCATCGCTACAAGCGCCGCATCCACATCCGCATCCACTACCTCTGGTGTTGTCTCTACTGCCACTGGTTCAGTCACTTTATCCTCTAACGCTTCTACCACCGTCTCTTCTACGATCTCTTCTAGCGCCCCAGACTCAATAATTCCTTCATCTAGCGCCTCTATCTCTGGTGTCTCAAACTCCACTACAGCATCTGGTTCAATCGCTTCTACTGCTTCCACCGCTTCCACTACTTCTACTGCATCCGCTGCATCCGCCACCAGCTTCACCTCAGGTTCCGCTTCTGTCTACACTACTACATTAACTTACTTGAATGCCACAAGTACAGTCGTGGTTTCCTGTTCAGAAACAACCGACGCTAGCGGTAACATTTACACCATTACCACAACTGTCCCATGCTCATCTACCACTGCCACCATCACATCTTGTGACGAAAACGGATGCCATGTTCCAGCACCAACTGCTACCGACGCAACTGCAACCGTTTCCTCCAAGTCATACACCACTGTTACTGTTACTCACTGTGACAACAATGGCTGTAACACCAAGACTGTCACTTCTGAATGTTCTAAAGAAACTGCAGCAACCACCATTTCTCCAAAATCATACACTACTGTTACCGTTACTCACTGTGACGACAACGGCTGTAACACCAAGACTGTCACTTCCGAGGCTTCCAAACAAACATCATTGGCCACTAGCACAGTCACCAAGTCTGCTGCTCCAACTTCTCATACTGCTGCTTCCAGCACCTTCACTGGTATTGTCGTTCAATCCGAAGGTATGGCTGCTGGTTTGAGAACCAATGCTTTAAGTACTTTGGCAGGTATTTTCATCCTTGCTTTTTTTTAAAATGAGTGCGTAACCGTACTTTCCTAAAAATAACTAAGTAGAAAGTATTTTAATATATAAACGTCAGTGTAAACATTCAAGTGATTTTAACTTTACGCGGTTGAAGAATGCTGTGTTCGAACTATAAAGCGTCAGAAAAGATGGTTTAGCGAAGGCACCATTATGAAGATAGACACATTCTTCTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTCATTTACTTTTATTTCGCGCGGTCGGTAAATTTTTCGTGGGTTTCTTTGAATCTATTAGCCGACATAAGAATAATGCATAAATAATATTTTTAATGTCTTCCTATGCCCAAAAGAAGAAGTCTTGAAGTTGCCGCACATGGAAATCACATGACCATGGCTTGGCCCTTCGTTTTAAATGCAACATGCAATATGGAATGTGTCATGAATACTATCAGCAGGAACAGAAAGCGTCGTTTTGTTTCTGCAAATGCTGTAGTTTTGGGCCGAAAATAGATGTAGTAGAATATATAGTGAAACGTGATGTACAAAAGAAAAAGGTAGTTTAAAAAAAATTAGATAACTTGGATTTTTACCCTGAATATTGCATGTGATTCGTAAAGAACTGAGTTACCTCAAACGGACCTCCCTTTTCATTTCGTATTCCGCGAATCATGAAGTCATGCAATTACCTCTGAAGAGCTGACTGTCCCAAAAGAAGCTATCGAATCTGTCCTTGATTTATTTAAGCCTTGCGTTTCGAGAAAGTGAAAACCAATTGAATACAAAATAAAAAAAAAGAAGAAAGAAATAGCAGGTCTAAGATATATAAGAAAGTTAATATCATTTTTGAACATTTTATTTTAGACGCCTTCAGCCGCGCGACGCCCGGAGTAATCATATGCCCATGACTTTACCAAAAGGCAACAGGGAGGAACATGCATTAATGTGAAGCATCACTGCTGCAATTCTCGGTGTTGCTAATAATTCATGGATCGAGAAAGAGACATAACATTTAGGCCAATTTTTTGAATAAATATGAACTCAGCTAAGACTCGACAATACAATTTTCTTATACTAAACGTAGATTTATAAAATAAACACAACTGTAAGGGCAATGCAACCGTAGATGCATATATCATTTATAGAAATTATATCCAACAGAAAGCTCAGACTTATATCCGGTTTAAGAGAGAAATTCTTGCTCATATTACCCCAAGACCAGGTGGCGTGTTGAAGTTTATAACATATAAGAACTACTACCTCATGAATTCTAGTGGATGAAAGAAGCAGCACGAACACCATTTCTACAGACAACGACACATGGAAAGGTTCACCATTCCCAAAGAAAACAACGATGGCCACAAGGGTGTGGTCCTCCATTCTCCTACTGTTGGAAGGAGATATTATCCGACCGACTGTTTTGTGATATGGCAAACTATTTTTTTAAATGAGCAAAATTACTTCTTTTGGCTGGAAATGTCATTAGAAAGTGCCCAAGTGACATTTAGCTAAACTCGGGTATTGTCTACAAGACCGGTGCTGTGACCGTTTCCAATACGGAAAGAAACGGTACTGGGAGCAGGAGTTGCTTTTACAGATATGAACAATGCCAATAGAGCCGCACATGTAATTACTGGTTCACACTCGTGGGGCCCACACGATTCCTGTGCAAAGTTTGACAAGAGGATGGAGTTTCACGTAAATGCTGCCAAAGGTGATGCGGTTTTGTTTTTGGGCAGCCTCTACCATGTTGCAAGTGCGAACCATACTGTGGCCACATAGATTACAAAAAAAGTCCAGGATATCTTGCAAACCTAGCTTGTTTTGTAAACGACATTGAAAAAAGCGTATTAAGGTGAAACAATCAAGATTATCTATGCCGATGAAAAATGAAAGGTATGATTTCTGCCACAAATATATAGTAGTTATTTTATACATCAAGATGAGAAAATAAAGGGATTTTTTCGTTCTTTTATCATTTTCTCTTTCTCACTTCCGACTACTTCTTATATCTACTTTCATCGTTTCATTCATCGTGGGTGTCTAATAAAGTTTTAATGACAGAGATAACCTTGATAAGCTTTTTCTTATACGCTGTGTCACGTATTTATTAAATTACCACGTTTTCGCATAACATTCTGTAGTTCATGTGTACTAAAAAAAAAAAAAAAAAAGAAATAGGAAGGAAAGAGTAAAAAGTTAATAGAAAACAGAACACATCCCTAAACGAAGCCGCACAATCTTGGCGTTCACACGTGGGTTTAAAAAGGCAAATTACACAGAATTTCAGACCCTGTTTACCGGAGAGATTCCATATTCCGCACGTCACATTGCCAAATTGGTCATCTCACCAGATATGTTATACCCGTTTTGGAATGAGCATAAACAGCGTCGAATTGCCAAGTAAAACGTATATAAGCTCTTACATTTCGATAGATTCAAGCTCAGTTTCGCCTTGGTTGTAAAGTAGGAAGAAGAAGAAGAAGAAGAGGAACAACAACAGCAAAGAGAGCAAGAACATCATCAGAAATACCAATGTTGAAGTCAGCCGTTTATTCAATTTTAGCCGCTTCTTTGGTTAATGCAGGTACCATACCCCTCGGAAAGTTATCTGACATTGACAAAATCGGAACTCAAACGGAAATTTTCCCATTTTTGGGTGGTTCTGGGCCATACTACTCTTTCCCTGGTGATTATGGTATTTCTCGTGATTTGCCGGAAAGTTGTGAAATGAAGCAAGTGCAAATGGTTGGTAGACACGGTGAAAGATACCCCACTGTCAGCAAAGCCAAAAGTATCATGACAACATGGTACAAATTGAGTAACTATACCGGTCAATTCAGCGGAGCATTGTCTTTCTTGAACGATGACTACGAATTTTTCATTCGTGACACCAAAAACCTAGAAATGGAAACCACACTTGCCAATTCGGTCAATGTTTTGAACCCATATACCGGTGAGATGAATGCTAAGAGACACGCTCGTGATTTCTTGGCGCAATATGGCTACATGGTCGAAAACCAAACCAGTTTTGCCGTTTTTACGTCTAACTCGAACAGATGTCATGATACTGCCCAGTATTTCATTGACGGTTTGGGTGATAAATTCAACATATCCTTGCAAACCATCAGTGAAGCCGAGTCTGCTGGTGCCAATACTCTGAGTGCCCACCATTCGTGTCCTGCTTGGGACGATGATGTCAACGATGACATTTTGAAAAAATATGATACCAAATATTTGAGTGGTATTGCCAAGAGATTAAACAAGGAAAACAAGGGTTTGAATCTGACTTCAAGTGATGCAAACACTTTTTTTGCATGGTGTGCATATGAAATAAACGCTAGAGGTTACAGTGACATCTGTAACATCTTCACCAAAGATGAATTGGTCCGTTTCTCCTACGGCCAAGACTTGGAAACTTATTATCAAACGGGACCAGGCTATGACGTCGTCAGATCCGTCGGTGCCAACTTGTTCAACGCTTCAGTGAAACTACTAAAGGAAAGTGAGGTCCAGGACCAAAAGGTTTGGTTGAGTTTCACCCACGATACCGATATTCTGAACTATTTGACCACTATCGGCATAATCGATGACAAAAATAACTTGACCGCCGAACATGTTCCATTCATGGAAAACACTTTCCACAGATCCTGGTACGTTCCACAAGGTGCTCGTGTTTACACTGAAAAGTTCCAGTGTTCCAATGACACCTATGTTAGATACGTCATCAACGATGCTGTCGTTCCAATTGAAACCTGTTCTACTGGTCCAGGGTTCTCCTGTGAAATAAATGACTTCTACGACTATGCTGAAAAGAGAGTAGCCGGTACTGACTTCCTAAAGGTCTGTAACGTCAGCAGCGTCAGTAACTCTACTGAATTGACCTTTTTCTGGGACTGGAATACCAAGCACTACAACGACACTTTATTAAAACAGTAAATAGATAATATGATTATGTAATTTTAGAAACTAATTATGAATACCGATTTATTTTTTTTTTTTTTTTTCACTTTTGCTGGCAAGAAATACGAAATTGCAATGACGATCACAGTCCAAAGAGGTAAGCACAAAGGCGCAGTATGTGATTACTCTATCATTCTTTAGCAAAACCAGGATAGGAGTATATGTATAAGAAATATGCAACGCCATCATTTAATGCAATAGACACGACATGCCCTTTACATGAGGTGGTACAATGTTTTAATATTGTGTCAGGGCAAGTACATGATAATATCGTTTAAAGATGATGCTAGAGTAAAAGTATGAAGTGAAAGAAAAGGGCAATTGATTGACTAAGCGGATGTTGTAGGATGATATAGTGGCTCATGATCTGTAAATGATCGGTTGACCGCAGTATTATATAATAACATCCGTATAAGTACATATACTACCATGTCTGTTCTCTACATTGCTTTTTATTCAAGATTATTGGTTTTCCTAACCGCCGCGCCGCGCAGGTACCCCGCGCATCTCTTCTTCTCGAAGAAAGCGGAAAAAACAAAAAAAAAAGTATAAATAGTGGAGTCTTTTCCCATTTAACATTTAGAAAAAAATTCGAATGGAAATTTCTTGCCGAACATTTAACCGGAGACCCTTGGCGGCTTTTTCTCAGTTTCGTGGGCTAGTACATTTTACCTAGTATGCTGGGAACTTTTTTTCCGTATTCTATTCTATTCCTTGCCTTACTTTTCTTATCATTTTTTATATAACCAATTTCAAAAATACTTTTTAACTGTCATAGACGCATTTTGTTTATTACAAATTAAAAGAATCAAATATAATATGTGCAATTAATAACTCCACAAGTAGCGAAAGCAATGGCCGCCATTAGAGACTACAAGACCGCACTAGATCTTACCAAGAGCCTACCAAGACCGGATGGTTTGTCAGTGCAGGAACTGATGGACTCCAAGATCAGAGGTGGGTTGGCTTATAACGATTTTTTAATCTTACCAGGTTTAGTCGATTTTGCGTCCTCTGAAGTTAGCCTACAGACCAAGCTAACCAGGAATATTACTTTAAACATTCCATTAGTATCCTCTCCAATGGACACTGTGACGGAATCTGAAATGGCCACTTTTATGGCTCTGTTGGATGGTATCGGTTTCATTCACCATAACTGTACTCCAGAGGACCAAGCTGACATGGTCAGAAGAGTCAAGAACTATGAAAATGGGTTTATTAACAACCCTATAGTGATTTCTCCAACTACGACCGTTGGTGAAGCTAAGAGCATGAAGGAAAAGTATGGATTTGCAGGCTTCCCTGTCACGGCAGATGGAAAGAGAAATGCAAAGTTGGTGGGTGCCATCACCTCTCGTGATATACAATTCGTTGAGGACAACTCTTTACTCGTTCAGGATGTCATGACCAAAAACCCTGTTACCGGCGCACAAGGTATCACATTATCAGAAGGTAACGAAATTCTAAAGAAAATCAAAAAGGGTAGGCTACTGGTTGTTGATGAAAAGGGTAACTTAGTTTCTATGCTTTCCCGAACTGATTTAATGAAAAATCAGAAGTACCCATTAGCGTCCAAATCTGCCAACACCAAGCAACTGTTATGGGGTGCTTCTATTGGGACTATGGACGCTGATAAAGAAAGACTAAGATTATTGGTAAAAGCTGGCTTGGATGTCGTCATATTGGATTCCTCTCAAGGTAACTCTATTTTCCAATTGAACATGATCAAATGGATTAAAGAAACTTTCCCAGATTTGGAAATCATTGCTGGTAACGTTGTCACCAAGGAACAAGCTGCCAATTTGATTGCTGCCGGTGCGGACGGTTTGAGAATTGGTATGGGAACTGGCTCTATTTGTATTACCCAAAAAGTTATGGCTTGTGGTAGGCCACAAGGTACAGCCGTCTACAACGTGTGTGAATTTGCTAACCAATTCGGTGTTCCATGTATGGCTGATGGTGGTGTTCAAAAACATTGGTCATATTATTACCAAAGCTTTGGCTCTTGGTTCTTCTACTGTTATGATGGGTGGTATGTTGGCCGGTACTACCGAATCACCAGGTGAATATCTCTATCAAGATGGTAAAAGATTGAAGGCGTATCGTGGTATGGGCTCCATTGACGCCATGCAAAAGACTGGTACCAAAGGTAATGCATCTACCTCCCGTTACTTTTCCGAATCAGACAGTGTTTTGGTCGCACAAGGTGTCTCTGGCGCTGTCGTTGACAAAGGATCCATTAAGAAATTTATTCCGTACTTGTACAATGGATTACAACATTCTTGTCAAGACATCGGCTGTAGGTCGTTAACTTTACTAAAGGAAAATGTCCAAAGCGGTAAAGTTAGATTTGAATTCAGAACCGCTTCTGCTCAACTAGAAGGTGGTGTTAATAACTTACATTCCTACGAAAAACGTTTACATAACTGAATGTTAAATGGGATCATTAATACAATAGTACTGTACGTATGGCACCTGTACATACTGCGTTATAAATGTACTAATGGAATGATATATTAATATATAGTGTGTTTATACCTTATTATTGATGATTAGTATATATTTTTATATTTAGGTGATTTTAGTGGAGATTATTTGGTGGTAATTACACTAGTATACATAAAATGGGTAGTGGATATTTGTATAGAAAGGGCATTACGCATGGAGTTAAGAGTATTTACATGATAATTGGGTTCCGTGATTCATTATAGATAATAAAACGTGGATAATATTGGGTGTTATAGGTAAATGGGACAGGGTATAGACCGCTGAGGCAAGTGCCGTGTATGGTGATGTGGTATGGTATCGAGTACCGATGGAGTGAGAGATGGCCTTGGTGTAGAGTATTATGGCGGGTAAGTTAGATGATGTATTGTTTACGTTATATTTGTTTAAATTGGATTTGTTTACATTAGATTTGTTTACATTTCAATATATCAATGGAGGGTATGTAGCATTATGGTAAGTAGCACGTGGTAGATGGGGATTGTAGGTGGATGGTAGGATGAGTGGTAGTGAGAGTTGGATAAGATATATTGGGCAGGGGATAGATGGTTGTTGGGGTGTGGTGATGGATAGTGAGTGGATAGTGAGTGGATGGATGGTGGAGTGGGGGAATGAGACAGGGCATGGGGTGGTGAGGTAAGTGCCGTGGATTGTGATGATGGAGAGGGAGGGTAGTTGACATGGAGTTAGAATTGGGTCAGTGTTAGTGTTAGTGTTAGTATTAGGGTGTGGTGTGTGGGTGTGGTGTGGGTGTGGGTGTGGGTGTGGGTGTGGGTGTGGGTGTGGTGTGGTGTGTGGGTGTGGTGTGGGTGTGGTGTGTGTGGG";
    $start = 0;
    $end = length($dna);
}

my $segment = {
    ref => $ref,
    start => $start,
    end => $end
};
my $lb = $segment->{start};
my $rb = $segment->{end};

design_primers($segment, $lb, $rb);

sub get_primer3_params {
  my %attr;
  for ( grep {/PRIMER_/} param() ) {
    $attr{$_} = param($_) if param($_);
    param( $_, '' );
  }
  return %attr;
}

sub design_primers {
  my ( $segment, $lb, $rb ) = @_;
    my $exclude = 0;

    my $offset  = $segment->{start} - 1;

    my $tstart  = $lb - $offset;
    $tstart += int(($rb - $lb)/2);
    my $ptarget = join ',', $tstart,1;

    my %attr = get_primer3_params();
    $attr{seq} = $dna;
    $attr{id} = $ref;
    $attr{target} = $ptarget;
    $attr{excluded} = $exclude if $exclude;

    my $size_range ||= join ' ', qw/
	100-300 301-400 401-500 501-600 601-700 701-800 801-900
	901-1000 1001-1200 1201-1400 1401-1600 1601-1800 1801-2000
	2001-2400 2401-2600 2601-2800 2801-3200 3201-3600 3601-4000/;

    $attr{PRIMER_PRODUCT_SIZE_RANGE} ||= $size_range;


    my $pcr = Bio::PrimerDesigner->new( 
	program => BINARY,
	method => METHOD );

    $pcr or fatal_error(Bio::PrimerDesigner->error);
    my $binpath = BINPATH;
    my $method = $binpath =~ /http/i ? 'remote' : METHOD;

    if ( $method eq 'local' && $binpath ) {
    $pcr->binary_path($binpath) or fatal_error($pcr->error);
    }
    else {
    $pcr->url($binpath) or fatal_error($pcr->error);
    }

    my $res = $pcr->design(%attr) or do {
	my $error = $pcr->error;
	$error =~ s/([A-Z,_]+=)/<br>$1/g;
	#if ($error =~ m/(PRIMER_ERROR.+$)/) {
	    #fatal_error($1)
	#} else {
	    fatal_error($error);
	#}
    };

    primer_results( $res, $segment, $lb, $rb );
}


sub primer_results {
  my ( $res, $segment, $lb, $rb ) = @_;
  my $offset = $segment->{start};
  my $ref    = $segment->{ref};
  my $num    = grep {/^\d+$/} keys %$res;

  my $raw_output = pre($res->raw_output);
  $raw_output =~ s/^(SEQUENCE=\w{25}).+$/$1... \(truncated for display only\)/m;

  # Give up if primer3 failed
  unless ($res->left) {
    $raw_output =~ s/([A-Z,_]+=)/<br>$1/g;
    fatal_error("No primers found:$raw_output") 
  }

  my @attributes = qw/ left right startleft startright tmleft tmright
      qual lqual rqual leftgc rightgc lselfany lselfend rselfany rselfend/;
  
  my ( @rows, @feats );
  
  my $text = "This value should be less than 1 for best results but don\'t worry too much";
  my $Primer_Pair_Quality = 'Primer_Pair_Quality '.a( { -href => "javascript:alert(\"$text\")" }, '[?]'); 
  my $spacer = td( {-width => 25}, '&nbsp;');

    my $bin_path = abs_path(dirname($0));
    my $plugin_path = dirname($bin_path);
    my ($out, $filename, $tmpdir);
    eval {
    	$tmpdir = tempdir( DIR => "$plugin_path/tmp" );
	($out, $filename) = tempfile( 
	DIR => $tmpdir,
	SUFFIX => '.gff3' );
    };

    fatal_error("$@") if ($@);
 
    for my $n ( 1 .. $num ) {
	my %r;
	for (@attributes) {
	    $r{$_} = $res->$_($n);
	}
	next unless $r{left};

	$r{prod} = $r{startright} - $r{startleft};
	$r{startleft}  += $offset;
	$r{startright} += $offset;

	for (qw/ qual lqual rqual /) {
	    $r{$_} =~ s/^(\S{6}).+/$1/;

	    # low primer pair quality warning
	    if ( $r{$_} > 1 ) {
		my $msg = quality_warning();
		$msg = "alert('$msg')";
		$r{$_} = a(
		{ -href    => 'javascript:void(0)',
		    -title   => 'Low quality warning',
		    -onclick => $msg
		},
		b( font( { -color => 'red' }, $r{$_} ) )
		);

	    }
	}

	my $start = $r{startleft}-20;
	my $end = $r{startright}+20;
	print $out join("\t", ($ref,"PrimerDesigner","gene",$start,$end,".",
	    ".",0,"ID=$n;Name=$n\n"));

	my $table = table(
	{ -style => "" },
	[Tr(
	    [ 
	    th(
		{ -class => 'searchtitle', -align => 'left' },
		[ 'Primer', "Sequence (5'->3')", 
		qw/Tm %GC Coord Quality Product/, $Primer_Pair_Quality ]
	    ),
	    td(
		[          'left',        $r{left},  $r{tmleft},
		$r{leftgc}, $r{startleft}, $r{lqual}, '&nbsp;',
		'&nbsp;'
		]
	    ),
	    td(
		[    'right',        $r{right}, $r{tmright},
		$r{rightgc}, $r{startright}, $r{rqual}, $r{prod},
		$r{qual}
		]
	    ),
	    td(
		{ -colspan => 9 }, primer3_report( $segment, $res, \%r )
		)
	    ]
	    )]);

	open(my $report_fh, ">>", "$tmpdir/report_$n.html") || die $!;
	print $report_fh $table;
	print $report_fh a( { -href => "raw_output.html" }, 
	    'PRIMER3 raw output');
	close($report_fh);
    }

    close($out);

    (my $url_path = $filename) =~ s!^$plugin_path/!!;
    my $url_dir = dirname($url_path);
    print <<JSON;
    { "gff": '$url_path', "dir": '$url_dir' }
JSON

    my $table = table(
	{ -style => "" },
	[ @rows,
	Tr( td( { -colspan => 9, -class => 'searchtitle' }, 
	    $raw_output)
	    )
	]
	); 
    open(my $raw_fh, ">>", "$tmpdir/raw_output.html") || die $!;
    print $raw_fh $table;
    close($raw_fh);

  exit(0);

}

sub fatal_error {
    my $msg = shift;
    #my $wrapstring = '';
    #while (length($msg)) {
	#$wrapstring .= substr($msg, 0, 80, '')."\n"; 
    #}
    $msg = quotemeta($msg);
    print <<JSON;
	{ "error": '$msg' }
JSON
    exit 0;
}

# GENERATE A PRIMER_3-STYLE REPORT
# contributed by Nathan Liles
# Based on code by Russell Smithies
# russell.smithies@agresearch.co.nz
sub primer3_report { 
  my $sub_segment = shift;
  my $sub_res     = shift;
  my %sub_r       = %{ shift @_ };
  my @target      = split( /\,/, $sub_res->TARGET );
  my $start       = $sub_segment->{start};
  my $end         = $sub_segment->{end};
  my $ref         = $sub_segment->{ref};

  # tweak the names to be coords for the target rather than the displayed region
  my $start_name = $start + $target[0];
  my $end_name   = $end + $target[0] + $target[1];
  my $name = "$ref:$start_name..$end_name";

  my $offset;
  if ( ( $sub_r{startright} - $start ) < length( $sub_res->SEQUENCE ) ) {
    $offset = 100;
  }
  else {
    $offset = 0;
  }

  # trim this much off the front of the displayed sequence to keep it a reasonable size
  my $trunc = $sub_r{startleft} - $start - $offset;

  my $rs;
  $rs = "<pre>";
  $rs .= "\n\n";
  $rs .= "No mispriming library specified\n";
  $rs .= "Using 1-based sequence positions\n\n";

  # set width of name field
  my $max_name_length = length( $name . '|RIGHT  ' );
  $rs .= sprintf(
    sprintf( "%s ", '%-' . $max_name_length . 's' )
        . " %5s %5s %4s %5s %5s %4s  %-30s\n",
    'OLIGO', 'start', 'len', 'tm', 'gc%', 'any', '3\'', 'seq', );
  $rs .= sprintf(
    sprintf( "%s ", '%-' . $max_name_length . 's' )
        . " %5d %5d %4s %5s %5s %4s  %-30s\n",
    $name . '|LEFT',        $sub_r{startleft} - $start - $trunc,
    length( $sub_r{left} ), $sub_r{tmleft},
    $sub_r{leftgc},         $sub_r{lselfany},
    $sub_r{lselfend},       $sub_r{left}
  );
  $rs .= sprintf(
    sprintf( "%s ", '%-' . $max_name_length . 's' )
        . " %5d %5d %4s %5s %5s %4s  %-30s\n",
    $name . '|RIGHT',        $sub_r{startright} - $start - $trunc,
    length( $sub_r{right} ), $sub_r{tmright},
    $sub_r{rightgc},         $sub_r{rselfany},
    $sub_r{rselfend},        $sub_r{right}
  );
  $rs .= "\n";
  $rs .= sprintf( "PRODUCT SIZE  : %-4d\n", $sub_r{prod} );
  $rs .= sprintf( "TARGET REGION : %s\n", "$ref:$start_name..$end_name" );
  $rs .= sprintf(
    "TARGETS (start\, len)\*: %d\,%d\n",
    $target[0] - $trunc,
    $target[1]
  );
  $rs .= "\n";

  # mark the primers and target on the alignments track
  my $sub_alignments .= " " x ( $sub_r{startleft} - $start - $trunc );

  # left primer
  $sub_alignments .= ">" x length( $sub_r{left} );
  $sub_alignments .= " " x ( $target[0] - length($sub_alignments) - $trunc );

  # target area
  $sub_alignments .= "*" x $target[1];
  $sub_alignments
      .= " " x ( $sub_r{startright} - $start - length($sub_alignments) -
        length( $sub_r{right} ) - $trunc + 1 );

  # right primer
  $sub_alignments .= "<" x length( $sub_r{right} );

  my $dna = $sub_res->SEQUENCE;

  # trim displayed sequence
  $dna = substr( $dna, $trunc );
  $dna = substr( $dna, 0, ( $sub_r{prod} + $offset + $offset ) );

  # hack to place alignment track below sequence
  $dna =~ s/(.{1,60})/$1;/g;
  my @dna_bits = split( /;/, $dna );
  $sub_alignments =~ s/(.{1,60})/$1;/g;
  my @alignment_bits = split( /;/, $sub_alignments );

  my $i = 0;

  # print sequence and alignments
  while ( $i <= $#dna_bits ) {
    $alignment_bits[$i] ||= '';
    $rs .= sprintf( "%3d %s\n", ( $i * 60 + 1 ), $dna_bits[$i] );
    $rs .= "    " . $alignment_bits[$i] . "\n";
    $rs .= "\n";
    $i++;
  }
  $rs .= "</pre>";
  return $rs;
}

sub quality_warning {
  my $msg = <<END;
Primer-pair penalty (quality score) warning.
BREAK
For best results, a primer-pair should have a quality
score < 1.
BREAK
The score for the pair is the the sum of the scores
for each individual primer.
BREAK
If the high score is due to a departure from optimal primer
GC-content or Tm, the primers are probably OK.
Otherwise, more optimal primers can often be obtained
by adjusting the design parameters (especially
the product size range).
END
  $msg =~ s/\n/ /gm;
  $msg =~ s/BREAK/\\n/g;

  return $msg;
}
